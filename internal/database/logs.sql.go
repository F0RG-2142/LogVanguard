// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: logs.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getAllLogs = `-- name: GetAllLogs :many
SELECT id, user_id, created_at, level, service, msg FROM logs WHERE user_id = $1 ORDER BY created_at ASC
`

func (q *Queries) GetAllLogs(ctx context.Context, userID uuid.UUID) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, getAllLogs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.Level,
			&i.Service,
			&i.Msg,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLogsByDate = `-- name: GetLogsByDate :many
SELECT id, user_id, created_at, level, service, msg FROM logs WHERE user_id = $1 AND created_at BETWEEN $1 AND $2
`

type GetLogsByDateParams struct {
	UserID    uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) GetLogsByDate(ctx context.Context, arg GetLogsByDateParams) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, getLogsByDate, arg.UserID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.Level,
			&i.Service,
			&i.Msg,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLogsByLevel = `-- name: GetLogsByLevel :many
SELECT id, user_id, created_at, level, service, msg FROM logs WHERE user_id = $1 AND level = $2
`

type GetLogsByLevelParams struct {
	UserID uuid.UUID
	Level  string
}

func (q *Queries) GetLogsByLevel(ctx context.Context, arg GetLogsByLevelParams) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, getLogsByLevel, arg.UserID, arg.Level)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.Level,
			&i.Service,
			&i.Msg,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLogsByService = `-- name: GetLogsByService :many
SELECT id, user_id, created_at, level, service, msg FROM logs WHERE user_id = $1 AND service = $2
`

type GetLogsByServiceParams struct {
	UserID  uuid.UUID
	Service string
}

func (q *Queries) GetLogsByService(ctx context.Context, arg GetLogsByServiceParams) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, getLogsByService, arg.UserID, arg.Service)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.Level,
			&i.Service,
			&i.Msg,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newLog = `-- name: NewLog :exec
INSERT INTO logs (id, user_id, created_at, level, service, msg)
VALUES (
    gen_random_uuid (),
    $1,
    NOW(),
    $2,
    $3,
    $4
)
`

type NewLogParams struct {
	UserID  uuid.UUID
	Level   string
	Service string
	Msg     string
}

func (q *Queries) NewLog(ctx context.Context, arg NewLogParams) error {
	_, err := q.db.ExecContext(ctx, newLog,
		arg.UserID,
		arg.Level,
		arg.Service,
		arg.Msg,
	)
	return err
}
