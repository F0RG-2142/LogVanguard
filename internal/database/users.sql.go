// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, created_at, updated_at, email, hashed_api_key, hashed_password, subscription)
VALUES (
    gen_random_uuid (),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4
)
`

type CreateUserParams struct {
	Email          string
	HashedApiKey   string
	HashedPassword string
	Subscription   bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Email,
		arg.HashedApiKey,
		arg.HashedPassword,
		arg.Subscription,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByKey = `-- name: GetUserByKey :one
SELECT id FROM users WHERE hashed_api_key = $1
`

func (q *Queries) GetUserByKey(ctx context.Context, hashedApiKey string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserByKey, hashedApiKey)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateSubscription = `-- name: UpdateSubscription :exec
UPDATE users
SET 
    has_notes_premium = 'true'
WHERE
    id = $1
`

func (q *Queries) UpdateSubscription(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateSubscription, id)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    updated_at = NOW(),
    email = $1,
    hashed_password= $2
WHERE
    id = $3
`

type UpdateUserParams struct {
	Email          string
	HashedPassword string
	ID             uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Email, arg.HashedPassword, arg.ID)
	return err
}
